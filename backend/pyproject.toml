[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "festipin-backend"
version = "1.0.0"
description = "Festimo Backend API with Agent Orchestration"
authors = [
    {name = "Festimo Team", email = "team@festimo.com"}
]
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
    # Core Framework
    "fastapi==0.109.0",
    "uvicorn[standard]==0.27.0",
    "pydantic==2.5.3",
    "pydantic-settings==2.1.0",
    # AI/ML - Compatible versions
    "openai==1.10.0",
    "google-generativeai==0.3.2",
    "google-cloud-aiplatform==1.38.1",
    "langchain-core>=0.2.43,<0.3.0",
    "langchain>=0.2.0,<0.3.0",
    "langchain-openai>=0.1.0,<0.2.0",
    "langgraph>=0.2.16,<0.3.0",
    "langsmith>=0.1.147,<0.2.0",
    # Pinterest Scraping
    "playwright==1.41.0",
    "httpx==0.26.0",
    "beautifulsoup4==4.12.3",
    "lxml==5.1.0",
    # Database & Storage
    "firebase-admin==6.3.0",
    "google-cloud-firestore==2.14.0",
    "google-cloud-storage==2.14.0",
    # Caching
    "redis==5.0.1",
    "hiredis==2.3.2",
    # Image Processing
    "Pillow==10.2.0",
    "opencv-python==4.9.0.80",
    # Utilities
    "python-dotenv==1.0.0",
    "python-multipart==0.0.6",
    "python-jose[cryptography]==3.3.0",
    "passlib[bcrypt]==1.7.4",
    # Async & Background Tasks
    "celery==5.3.6",
    "aiofiles==23.2.1",
]

[project.optional-dependencies]
dev = [
    "pytest==7.4.4",
    "pytest-asyncio==0.23.3",
    "pytest-cov==4.1.0",
    "black==24.1.1",
    "flake8==7.0.0",
    "mypy==1.8.0",
]

[project.urls]
Homepage = "https://github.com/festimo/backend"
Repository = "https://github.com/festimo/backend"
Documentation = "https://docs.festimo.com"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
